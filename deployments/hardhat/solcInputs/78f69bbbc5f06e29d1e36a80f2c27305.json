{
  "language": "Solidity",
  "sources": {
    "contracts/_Grape.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// Supply cap of 15,000,000\r\ncontract _Grape is ERC20Capped(15_000_000 * 1e18), Ownable {\r\n\r\n    address public upgradeAddress;\r\n    address public wineryAddress;\r\n\r\n    constructor() ERC20(\"Grape\", \"GRAPE\") {}\r\n\r\n    function setUpgradeAddress(address _upgradeAddress) external onlyOwner {\r\n        upgradeAddress = _upgradeAddress;\r\n    }\r\n\r\n    function setWineryAddress(address _wineryAddress) external onlyOwner {\r\n        wineryAddress = _wineryAddress;\r\n    }\r\n\r\n    // external\r\n\r\n    function mint(address _to, uint256 _amount) external onlyOwner {\r\n        require(_to != address(0));\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function burn(address _from, uint256 _amount) external {\r\n        require(upgradeAddress != address(0) && wineryAddress != address(0), \"missing initial requirements\");\r\n        require(_msgSender() == upgradeAddress || _msgSender() == wineryAddress, \"msgsender does not have permission\");\r\n        _burn(_from, _amount);\r\n    }\r\n\r\n    function transferForUpgradesFees(address _from, uint256 _amount) external {\r\n        require(upgradeAddress != address(0), \"missing initial requirements\");\r\n        require(_msgSender() == upgradeAddress, \"only the upgrade contract can call transferForUpgradesFees\");\r\n        _transfer(_from, upgradeAddress, _amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/WineryProgression.sol": {
      "content": "// Winery\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IGrape {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function burn(address owner, uint256 index) external returns (uint256);\r\n}\r\n\r\ninterface IWinery {\r\n    function skillPoints(address owner) external view returns (uint256);\r\n    function skillsLearned(address owner, uint256 index) external view returns (uint256);\r\n    function grapeDeposited(address owner) external view returns (uint256);\r\n}\r\n\r\ncontract WineryProgression is Ownable {\r\n\r\n    // Constants\r\n    uint256 public constant BURN_ID = 0;\r\n    uint256 public constant FATIGUE_ID = 1;\r\n    uint256 public constant CELLAR_ID = 2;\r\n    uint256 public constant MASTERVINTNER_ID = 3;\r\n    uint256 public constant UPGRADES_ID = 4;\r\n    uint256 public constant VINTNERS_ID = 5;\r\n    uint256 public constant STORAGE_ID = 6;\r\n    // uint256 public constant MAFIA_ID = 7;\r\n\r\n    uint256[30] public grapeLevels = [0, 20 * 1e18, 48 * 1e18, 83 * 1e18, 125 * 1e18, 175 * 1e18, 235 * 1e18, 310 * 1e18, 400 * 1e18, \r\n        510 * 1e18, 641 * 1e18, 805 * 1e18, 1001 * 1e18, 1213 * 1e18, 1497 * 1e18, 1851 * 1e18, 2276 * 1e18, 2772 * 1e18, 3322 * 1e18, 3932 * 1e18,\r\n        4694 * 1e18, 5608 * 1e18, 6658 * 1e18, 7877 * 1e18, 9401 * 1e18, 11229 * 1e18, 13363 * 1e18, 15801 * 1e18, 18545 * 1e18, 21593 * 1e18];\r\n\r\n    uint256 public maxGrapeAmount = grapeLevels[grapeLevels.length - 1];\r\n    uint256 public baseCostRespect = 25 * 1e18;\r\n\r\n    uint256[4] public burnSkillValue = [0,3,6,8];\r\n    uint256[6] public fatigueSkillValue = [100,92,85,80,70,50];\r\n    uint256[3] public cellarSkillValue = [0,4,9];\r\n    uint256[3] public masterVintnerSkillValue = [100,103,110];\r\n    uint256[6] public upgradesSkillValue = [1,4,6,8,11,100];\r\n    uint256[6] public vintnersSkillValue = [10,15,20,30,50,20000];\r\n    uint256[6] public vintageWineStorageSkillValue = [6000 * 1e18, 15000 * 1e18, 50000 * 1e18, 100000 * 1e18, 300000 * 1e18, 500000 * 1e18];\r\n    // uint256[4] public mafiaModSkillValue = [0,3,6,10];\r\n\r\n    uint256[8] public MAX_SKILL_LEVEL = [\r\n        burnSkillValue.length - 1,\r\n        fatigueSkillValue.length - 1,\r\n        cellarSkillValue.length - 1,\r\n        masterVintnerSkillValue.length - 1,\r\n        upgradesSkillValue.length - 1,\r\n        vintnersSkillValue.length - 1,\r\n        vintageWineStorageSkillValue.length - 1\r\n        // mafiaModSkillValue.length - 1\r\n    ];\r\n\r\n    IGrape public grape;\r\n\r\n    uint256 public levelTime;\r\n\r\n    mapping(address => uint256) public grapeDeposited; // address => total amount of grape deposited\r\n    mapping(address => uint256) public skillPoints; // address => skill points available\r\n    mapping(address => uint256[8]) public skillsLearned; // address => skill learned.\r\n\r\n    constructor(address _grape) {\r\n        grape = IGrape(_grape);\r\n    }\r\n\r\n    // EVENTS\r\n\r\n    event receivedSkillPoints(address owner, uint256 skillPoints);\r\n    event skillLearned(address owner, uint256 skillGroup, uint256 skillLevel);\r\n    event respec(address owner, uint256 level);\r\n\r\n    // Setters\r\n    function setburnSkillValue(uint256 _index, uint256 _value) external onlyOwner {\r\n        burnSkillValue[_index] = _value;\r\n    }\r\n    function setfatigueSkillValue(uint256 _index, uint256 _value) external onlyOwner {\r\n        fatigueSkillValue[_index] = _value;\r\n    }\r\n    function setcellarSkillValue(uint256 _index, uint256 _value) external onlyOwner {\r\n        cellarSkillValue[_index] = _value;\r\n    }\r\n    function setmasterVintnerSkillValue(uint256 _index, uint256 _value) external onlyOwner {\r\n        masterVintnerSkillValue[_index] = _value;\r\n    }\r\n    function setupgradesSkillValue(uint256 _index, uint256 _value) external onlyOwner {\r\n        upgradesSkillValue[_index] = _value;\r\n    }\r\n    function setvintnersSkillValue(uint256 _index, uint256 _value) external onlyOwner {\r\n        vintnersSkillValue[_index] = _value;\r\n    }\r\n    function setvintageWineStorageSkillValue(uint256 _index, uint256 _value) external onlyOwner {\r\n        vintageWineStorageSkillValue[_index] = _value;\r\n    }\r\n    // function setmafiaModSkillValue(uint256 _index, uint256 _value) external onlyOwner {\r\n    //     mafiaModSkillValue[_index] = _value;\r\n    // }\r\n    \r\n    function setGrape(address _grape) external onlyOwner {\r\n        grape = IGrape(_grape);\r\n    }\r\n\r\n    function setBaseCostRespect(uint256 _baseCostRespect) external onlyOwner {\r\n        baseCostRespect = _baseCostRespect;\r\n    }\r\n\r\n    function setGrapeLevels(uint256 _index, uint256 _newValue) external onlyOwner {\r\n        require (_index < grapeLevels.length, \"invalid index\");\r\n        grapeLevels[_index] = _newValue;\r\n\r\n        if(_index == (grapeLevels.length - 1)){\r\n            maxGrapeAmount = grapeLevels[grapeLevels.length - 1];\r\n        }\r\n    }\r\n\r\n    // Views\r\n\r\n    /**\r\n    * Returns the level based on the total grape deposited\r\n    */\r\n    function _getLevel(address _owner) internal view returns (uint256) {\r\n        uint256 totalGrape = grapeDeposited[_owner];\r\n        uint256 maxId = grapeLevels.length - 1;\r\n\r\n        for (uint256 i = 0; i < maxId; i++) {\r\n            if (totalGrape < grapeLevels[i+1]) {\r\n                    return i+1;\r\n            }\r\n        }\r\n        return grapeLevels.length;\r\n    }\r\n\r\n    /**\r\n    * Returns a value representing the % of fatigue after reducing\r\n    */\r\n    function getFatigueSkillModifier(address _owner) public view returns (uint256) {\r\n        uint256 fatigueSkill = skillsLearned[_owner][FATIGUE_ID];\r\n        return fatigueSkillValue[fatigueSkill];\r\n    }\r\n\r\n    /**\r\n    * Returns a value representing the % that will be reduced from the claim burn\r\n    */\r\n    function getBurnSkillModifier(address _owner) public view returns (uint256) {\r\n        uint256 burnSkill = skillsLearned[_owner][BURN_ID];\r\n        return burnSkillValue[burnSkill];\r\n    }\r\n\r\n    /**\r\n    * Returns a value representing the % that will be reduced from the cellar share of the claim\r\n    */\r\n    function getCellarSkillModifier(address _owner) public view returns (uint256) {\r\n        uint256 cellarSkill = skillsLearned[_owner][CELLAR_ID];\r\n        return cellarSkillValue[cellarSkill];\r\n    }\r\n\r\n    /**\r\n    * Returns the multiplier for $VINTAGEWINE production based on the number of mastervintners and the skill points spent\r\n    */\r\n    function getMasterVintnerSkillModifier(address _owner, uint256 _masterVintnerNumber) public view returns (uint256) {\r\n        uint256 masterVintnerSkill = skillsLearned[_owner][MASTERVINTNER_ID];\r\n\r\n        if(masterVintnerSkill == 2 && _masterVintnerNumber >= 5){\r\n            return masterVintnerSkillValue[2];\r\n        } else if (masterVintnerSkill >= 1 && _masterVintnerNumber >= 2){\r\n            return masterVintnerSkillValue[1];\r\n        } else {\r\n            return masterVintnerSkillValue[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Returns the max level upgrade that can be staked based on the skill points spent\r\n    */\r\n    function getMaxLevelUpgrade(address _owner) public view returns (uint256) {\r\n        uint256 upgradesSkill = skillsLearned[_owner][UPGRADES_ID];\r\n        return upgradesSkillValue[upgradesSkill];\r\n    }\r\n\r\n    /**\r\n    * Returns the max number of vintners that can be staked based on the skill points spent\r\n    */\r\n    function getMaxNumberVintners(address _owner) public view returns (uint256) {\r\n        uint256 vintnersSkill = skillsLearned[_owner][VINTNERS_ID];\r\n        return vintnersSkillValue[vintnersSkill];\r\n    }\r\n\r\n    /**\r\n    * Returns the modifier for mafia mechanic\r\n    */\r\n    // function getMafiaModifier(address _owner) public view returns (uint256) {\r\n    //     uint256 mafiaModSkill = skillsLearned[_owner][MAFIA_ID];\r\n    //     return mafiaModSkillValue[mafiaModSkill];\r\n    // }\r\n\r\n    /**\r\n    * Returns the max storage for vintageWine in the winery\r\n    */\r\n    function getVintageWineStorage(address _owner) public view returns (uint256) {\r\n        uint256 vintageWineStorageSkill = skillsLearned[_owner][STORAGE_ID];\r\n        return vintageWineStorageSkillValue[vintageWineStorageSkill];\r\n    }\r\n\r\n    // Public views\r\n\r\n    /**\r\n    * Returns the Winery level\r\n    */\r\n    function getLevel(address _owner) public view returns (uint256) {\r\n        return _getLevel(_owner);\r\n    }\r\n\r\n    /**\r\n    * Returns the $GRAPE deposited in the current level\r\n    */\r\n    function getGrapeDeposited(address _owner) public view returns (uint256) {\r\n        uint256 level = _getLevel(_owner);\r\n        uint256 totalGrape = grapeDeposited[_owner];\r\n        if(level == grapeLevels.length){\r\n            return 0;\r\n        }\r\n\r\n        return totalGrape - grapeLevels[level-1];\r\n    }\r\n\r\n    /**\r\n    * Returns the amount of grape required to level up\r\n    */\r\n    function getGrapeToNextLevel(address _owner) public view returns (uint256) {\r\n        uint256 level = _getLevel(_owner);\r\n        if(level == grapeLevels.length){\r\n            return 0;\r\n        }\r\n        return grapeLevels[level] - grapeLevels[level-1];\r\n    }\r\n\r\n    /**\r\n    * Returns the amount of skills points available to be spent\r\n    */\r\n    function getSkillPoints(address _owner) public view returns (uint256) {\r\n        return skillPoints[_owner];\r\n    }\r\n\r\n    /**\r\n    * Returns the current skills levels for each skill group\r\n    */\r\n    function getSkillsLearned(address _owner) public view returns (\r\n        uint256 burn,\r\n        uint256 fatigue,\r\n        uint256 cellar,\r\n        uint256 mastervintner,\r\n        uint256 upgrades,\r\n        uint256 vintners,     \r\n        uint256 vintageWineStorage\r\n        // uint256 mafiaMod     \r\n    ) {\r\n        uint256[8] memory skills = skillsLearned[_owner];\r\n\r\n        burn = skills[BURN_ID];\r\n        fatigue = skills[FATIGUE_ID]; \r\n        cellar = skills[CELLAR_ID]; \r\n        mastervintner = skills[MASTERVINTNER_ID]; \r\n        upgrades = skills[UPGRADES_ID];\r\n        vintners = skills[VINTNERS_ID]; \r\n        vintageWineStorage = skills[STORAGE_ID]; \r\n        // mafiaMod = skills[MAFIA_ID]; \r\n    }\r\n\r\n    // External\r\n\r\n    /**\r\n    * Burns deposited $GRAPE and add skill point if level up.\r\n    */\r\n    function depositGrape(uint256 _amount) external {\r\n        address sender = msg.sender;\r\n        require(levelStarted(), \"You can't level yet\");\r\n        require (_getLevel(sender) < grapeLevels.length, \"already at max level\");\r\n        require (grape.balanceOf(sender) >= _amount, \"not enough GRAPE\");\r\n\r\n        if(_amount + grapeDeposited[sender] > maxGrapeAmount){\r\n            _amount = maxGrapeAmount - grapeDeposited[sender];\r\n        }\r\n\r\n        grape.burn(sender, _amount);\r\n\r\n        uint256 levelBefore = _getLevel(sender);\r\n        grapeDeposited[sender] += _amount;\r\n        uint256 levelAfter = _getLevel(sender);\r\n        skillPoints[sender] += levelAfter - levelBefore;\r\n\r\n        if(levelAfter == grapeLevels.length){\r\n            skillPoints[sender] += 1;\r\n        }\r\n\r\n        emit receivedSkillPoints(sender, levelAfter - levelBefore);\r\n    }\r\n\r\n    /**\r\n    *  Spend skill point based on the skill group and skill level. Can only spend 1 point at a time.\r\n    */\r\n    function spendSkillPoints(uint256 _skillGroup, uint256 _skillLevel) external {\r\n        address sender = msg.sender;\r\n\r\n        require(skillPoints[sender] > 0, \"Not enough skill points\");\r\n        require (_skillGroup <= MAX_SKILL_LEVEL.length - 1, \"Invalid Skill Group\");\r\n        require(_skillLevel >= 1 && _skillLevel <= MAX_SKILL_LEVEL[_skillGroup], \"Invalid Skill Level\");\r\n        \r\n        uint256 currentSkillLevel = skillsLearned[sender][_skillGroup];\r\n        require(_skillLevel == currentSkillLevel + 1, \"Invalid Skill Level jump\"); //can only level up 1 point at a time\r\n\r\n        skillsLearned[sender][_skillGroup] = _skillLevel;\r\n        skillPoints[sender]--;\r\n\r\n        emit skillLearned(sender, _skillGroup, _skillLevel);\r\n    }\r\n\r\n    /**\r\n    *  Resets skills learned for a fee\r\n    */\r\n    function resetSkills() external {\r\n        address sender = msg.sender;\r\n        uint256 level = _getLevel(sender);\r\n        uint256 costToRespec = level * baseCostRespect;\r\n        require (level > 1, \"you are still at level 1\");\r\n        require (grape.balanceOf(sender) >= costToRespec, \"not enough GRAPE\");\r\n\r\n        grape.burn(sender, costToRespec);\r\n\r\n        skillsLearned[sender][BURN_ID] = 0;\r\n        skillsLearned[sender][FATIGUE_ID] = 0;\r\n        skillsLearned[sender][CELLAR_ID] = 0;\r\n        skillsLearned[sender][MASTERVINTNER_ID] = 0;\r\n        skillsLearned[sender][UPGRADES_ID] = 0;\r\n        skillsLearned[sender][VINTNERS_ID] = 0;\r\n        skillsLearned[sender][STORAGE_ID] = 0;\r\n        // skillsLearned[sender][MAFIA_ID] = 0;\r\n\r\n        skillPoints[sender] = level - 1;\r\n\r\n        if(level == grapeLevels.length){\r\n            skillPoints[sender] += 1;\r\n        }\r\n\r\n        emit respec(sender, level);\r\n\r\n    }\r\n\r\n    // Admin\r\n\r\n    function levelStarted() public view returns (bool) {\r\n        return levelTime != 0 && block.timestamp >= levelTime;\r\n    }\r\n\r\n    function setLevelStartTime(uint256 _startTime) external onlyOwner {\r\n        require (_startTime >= block.timestamp, \"startTime cannot be in the past\");\r\n        require(!levelStarted(), \"leveling already started\");\r\n        levelTime = _startTime;\r\n    }\r\n\r\n\r\n    // In case we rebalance the leveling costs this fixes the skill points to correct players\r\n    function fixSkillPoints(address _player) public {\r\n        uint256 level = _getLevel(_player);\r\n        uint256 currentSkillPoints = skillPoints[_player];\r\n        // uint256 totalSkillsLearned = skillsLearned[_player][BURN_ID] + skillsLearned[_player][FATIGUE_ID] + skillsLearned[_player][CELLAR_ID] + skillsLearned[_player][MASTERVINTNER_ID] + skillsLearned[_player][UPGRADES_ID] + skillsLearned[_player][VINTNERS_ID] + skillsLearned[_player][STORAGE_ID] + skillsLearned[_player][MAFIA_ID];\r\n        uint256 totalSkillsLearned = skillsLearned[_player][BURN_ID] + skillsLearned[_player][FATIGUE_ID] + skillsLearned[_player][CELLAR_ID] + skillsLearned[_player][MASTERVINTNER_ID] + skillsLearned[_player][UPGRADES_ID] + skillsLearned[_player][VINTNERS_ID] + skillsLearned[_player][STORAGE_ID];\r\n\r\n        uint256 correctSkillPoints = level - 1;\r\n        if(level == grapeLevels.length){ // last level has 2 skill points\r\n            correctSkillPoints += 1;\r\n        }\r\n        if(correctSkillPoints > currentSkillPoints + totalSkillsLearned){\r\n            skillPoints[_player] += correctSkillPoints - currentSkillPoints - totalSkillsLearned;\r\n        }\r\n    }\r\n\r\n        // WINERY MIGRATION\r\n    IWinery public oldWinery;\r\n    mapping(address => bool) public updateOnce; // owner => has updated\r\n\r\n    function checkIfNeedUpdate(address _owner) public view returns (bool) {\r\n        if(updateOnce[_owner]){\r\n            return false; // does not need update if already updated\r\n        }\r\n\r\n        uint256 oldGrapeDeposited = oldWinery.grapeDeposited(_owner);\r\n\r\n        if(oldGrapeDeposited > 0){\r\n            return true; // if the player deposited any grape it means he interacted with the Winery improvements\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    function setOldWinery(address _oldWinery) external onlyOwner {\r\n        oldWinery = IWinery(_oldWinery);\r\n    }\r\n\r\n    function updateDataFromOldWinery(address _owner) external {\r\n        require (checkIfNeedUpdate(_owner), \"Owner dont need to update\");\r\n        updateOnce[_owner] = true;\r\n\r\n        grapeDeposited[_owner] = oldWinery.grapeDeposited(_owner);\r\n\r\n        skillPoints[_owner] = oldWinery.skillPoints(_owner);\r\n\r\n        uint256 burnSkillId = oldWinery.skillsLearned(_owner, 0);\r\n        uint256 fatigueSkillId = oldWinery.skillsLearned(_owner, 1);\r\n        uint256 cellarSkillId = oldWinery.skillsLearned(_owner, 2);\r\n        uint256 mastervintnerSkillId = oldWinery.skillsLearned(_owner, 3);\r\n        uint256 upgradeSkillId = oldWinery.skillsLearned(_owner, 4);\r\n        uint256 vintnerSkillId = oldWinery.skillsLearned(_owner, 5);\r\n        \r\n        skillsLearned[_owner] = [burnSkillId, fatigueSkillId, cellarSkillId, mastervintnerSkillId, upgradeSkillId, vintnerSkillId, 0, 0];\r\n\r\n        fixSkillPoints(_owner); // Fix skill points because of rebalance\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/Vintner.sol": {
      "content": "// Chef\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n// import \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\nimport \"./VintageWine.sol\";\r\n\r\ncontract Vintner is ERC721Enumerable, Ownable, Pausable {\r\n    using SafeERC20 for IERC20;\r\n    using Strings for uint256;\r\n\r\n    struct VintnerInfo {\r\n        uint256 tokenId;\r\n        uint256 vintnerType;\r\n    }\r\n\r\n    // CONSTANTS\r\n\r\n    // uint256 public constant VINTNER_PRICE_WHITELIST = 1 ether;\r\n    uint256 public constant VINTNER_PRICE_AVAX = 1.5 ether;\r\n\r\n    // uint256 public constant WHITELIST_VINTNERS = 1000;\r\n    uint256 public constant VINTNERS_PER_VINTAGEWINE_MINT_LEVEL = 5000;\r\n\r\n    // uint256 public constant MAXIMUM_MINTS_PER_WHITELIST_ADDRESS = 4;\r\n\r\n    uint256 public constant NUM_GEN0_VINTNERS = 10_000;\r\n    uint256 public constant NUM_GEN1_VINTNERS = 10_000;\r\n\r\n    uint256 public constant VINTNER_TYPE = 1;\r\n    uint256 public constant MASTER_VINTNER_TYPE = 2;\r\n\r\n    uint256 public constant VINTNER_YIELD = 1;\r\n    uint256 public constant MASTER_VINTNER_YIELD = 3;\r\n\r\n    uint256 public constant PROMOTIONAL_VINTNERS = 50;\r\n\r\n    // VAR\r\n\r\n    // external contracts\r\n    VintageWine public vintageWine;\r\n    address public wineryAddress;\r\n    address public vintnerTypeOracleAddress;\r\n\r\n    // metadata URI\r\n    string public BASE_URI;\r\n\r\n    // vintner type definitions (normal or master?)\r\n    mapping(uint256 => uint256) public tokenTypes; // maps tokenId to its type\r\n    mapping(uint256 => uint256) public typeYields; // maps vintner type to yield\r\n\r\n    // mint tracking\r\n    uint256 public vintnersMintedWithAVAX;\r\n    uint256 public vintnersMintedWithVINTAGEWINE;\r\n    // uint256 public vintnersMintedWhitelist;\r\n    uint256 public vintnersMintedPromotional;\r\n    uint256 public vintnersMinted = 50; // First 50 ids are reserved for the promotional vintners\r\n\r\n    // mint control timestamps\r\n    // uint256 public startTimeWhitelist;\r\n    uint256 public startTimeAVAX;\r\n    uint256 public startTimeVINTAGEWINE;\r\n\r\n    // VINTAGEWINE mint price tracking\r\n    uint256 public currentVINTAGEWINEMintCost = 20_000 * 1e18;\r\n\r\n    // whitelist\r\n    // bytes32 public merkleRoot;\r\n    // mapping(address => uint256) public whitelistClaimed;\r\n\r\n    // EVENTS\r\n\r\n    event onVintnerCreated(uint256 tokenId);\r\n    event onVintnerRevealed(uint256 tokenId, uint256 vintnerType);\r\n\r\n    /**\r\n     * requires vintageWine, vintnerType oracle address\r\n     * vintageWine: for liquidity bootstrapping and spending on vintners\r\n     * vintnerTypeOracleAddress: external vintner generator uses secure RNG\r\n     */\r\n    constructor(\r\n        VintageWine _vintageWine,\r\n        address _vintnerTypeOracleAddress,\r\n        string memory _BASE_URI\r\n    ) ERC721(\"VintageWine Game Vintners\", \"VINTAGEWINE-GAME-VINTNER\") {\r\n        require(address(_vintageWine) != address(0));\r\n        require(_vintnerTypeOracleAddress != address(0));\r\n\r\n        // set required contract references\r\n        vintageWine = _vintageWine;\r\n        vintnerTypeOracleAddress = _vintnerTypeOracleAddress;\r\n\r\n        // set base uri\r\n        BASE_URI = _BASE_URI;\r\n\r\n        // initialize token yield values for each vintner type\r\n        typeYields[VINTNER_TYPE] = VINTNER_YIELD;\r\n        typeYields[MASTER_VINTNER_TYPE] = MASTER_VINTNER_YIELD;\r\n    }\r\n\r\n    // VIEWS\r\n\r\n    // minting status\r\n\r\n    // function mintingStartedWhitelist() public view returns (bool) {\r\n    //     return startTimeWhitelist != 0 && block.timestamp >= startTimeWhitelist;\r\n    // }\r\n\r\n    function mintingStartedAVAX() public view returns (bool) {\r\n        return startTimeAVAX != 0 && block.timestamp >= startTimeAVAX;\r\n    }\r\n\r\n    function mintingStartedVINTAGEWINE() public view returns (bool) {\r\n        return\r\n            startTimeVINTAGEWINE != 0 &&\r\n            block.timestamp >= startTimeVINTAGEWINE;\r\n    }\r\n\r\n    // metadata\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return BASE_URI;\r\n    }\r\n\r\n    function getYield(uint256 _tokenId) public view returns (uint256) {\r\n        require(_exists(_tokenId), \"token does not exist\");\r\n        return typeYields[tokenTypes[_tokenId]];\r\n    }\r\n\r\n    function getType(uint256 _tokenId) public view returns (uint256) {\r\n        require(_exists(_tokenId), \"token does not exist\");\r\n        return tokenTypes[_tokenId];\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n        return\r\n            string(\r\n                abi.encodePacked(_baseURI(), \"/\", tokenId.toString(), \".json\")\r\n            );\r\n    }\r\n\r\n    // override\r\n\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        // winery must be able to stake and unstake\r\n        if (wineryAddress != address(0) && _operator == wineryAddress)\r\n            return true;\r\n        return super.isApprovedForAll(_owner, _operator);\r\n    }\r\n\r\n    // ADMIN\r\n\r\n    function setWineryAddress(address _wineryAddress) external onlyOwner {\r\n        wineryAddress = _wineryAddress;\r\n    }\r\n\r\n    function setVintageWine(address _vintageWine) external onlyOwner {\r\n        vintageWine = VintageWine(_vintageWine);\r\n    }\r\n\r\n    function setvintnerTypeOracleAddress(address _vintnerTypeOracleAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        vintnerTypeOracleAddress = _vintnerTypeOracleAddress;\r\n    }\r\n\r\n    // function setStartTimeWhitelist(uint256 _startTime) external onlyOwner {\r\n    //     require(\r\n    //         _startTime >= block.timestamp,\r\n    //         \"startTime cannot be in the past\"\r\n    //     );\r\n    //     startTimeWhitelist = _startTime;\r\n    // }\r\n\r\n    function setStartTimeAVAX(uint256 _startTime) external onlyOwner {\r\n        require(\r\n            _startTime >= block.timestamp,\r\n            \"startTime cannot be in the past\"\r\n        );\r\n        startTimeAVAX = _startTime;\r\n    }\r\n\r\n    function setStartTimeVINTAGEWINE(uint256 _startTime) external onlyOwner {\r\n        require(\r\n            _startTime >= block.timestamp,\r\n            \"startTime cannot be in the past\"\r\n        );\r\n        startTimeVINTAGEWINE = _startTime;\r\n    }\r\n\r\n    function setBaseURI(string calldata _BASE_URI) external onlyOwner {\r\n        BASE_URI = _BASE_URI;\r\n    }\r\n\r\n    /**\r\n     * @dev merkle root for WL wallets\r\n     */\r\n    // function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\r\n    //     merkleRoot = _merkleRoot;\r\n    // }\r\n\r\n    /**\r\n     * @dev allows owner to send ERC20s held by this contract to target\r\n     */\r\n    function forwardERC20s(\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address target\r\n    ) external onlyOwner {\r\n        _token.safeTransfer(target, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev allows owner to withdraw AVAX\r\n     */\r\n    function withdrawAVAX(uint256 _amount) external payable onlyOwner {\r\n        require(address(this).balance >= _amount, \"not enough AVAX\");\r\n        address payable to = payable(_msgSender());\r\n        (bool sent, ) = to.call{ value: _amount }(\"\");\r\n        require(sent, \"Failed to send AVAX\");\r\n    }\r\n\r\n    // MINTING\r\n\r\n    function _createVintner(address to, uint256 tokenId) internal {\r\n        require(\r\n            vintnersMinted <= NUM_GEN0_VINTNERS + NUM_GEN1_VINTNERS,\r\n            \"cannot mint anymore vintners\"\r\n        );\r\n        _safeMint(to, tokenId);\r\n\r\n        emit onVintnerCreated(tokenId);\r\n    }\r\n\r\n    function _createVintners(uint256 qty, address to) internal {\r\n        for (uint256 i = 0; i < qty; i++) {\r\n            vintnersMinted += 1;\r\n            _createVintner(to, vintnersMinted);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev as an anti cheat mechanism, an external automation will generate the NFT metadata and set the vintner types via rng\r\n     * - Using an external source of randomness ensures our mint cannot be cheated\r\n     * - The external automation is open source and can be found on vintageWine game's github\r\n     * - Once the mint is finished, it is provable that this randomness was not tampered with by providing the seed\r\n     * - Vintner type can be set only once\r\n     */\r\n    function setVintnerType(uint256 tokenId, uint256 vintnerType) external {\r\n        require(\r\n            _msgSender() == vintnerTypeOracleAddress,\r\n            \"msgsender does not have permission\"\r\n        );\r\n        require(\r\n            tokenTypes[tokenId] == 0,\r\n            \"that token's type has already been set\"\r\n        );\r\n        require(\r\n            vintnerType == VINTNER_TYPE || vintnerType == MASTER_VINTNER_TYPE,\r\n            \"invalid vintner type\"\r\n        );\r\n\r\n        tokenTypes[tokenId] = vintnerType;\r\n        emit onVintnerRevealed(tokenId, vintnerType);\r\n    }\r\n\r\n    /**\r\n     * @dev Promotional GEN0 minting\r\n     * Can mint maximum of PROMOTIONAL_VINTNERS\r\n     * All vintners minted are from the same vintnerType\r\n     */\r\n    function mintPromotional(\r\n        uint256 qty,\r\n        uint256 vintnerType,\r\n        address target\r\n    ) external onlyOwner {\r\n        require(qty > 0, \"quantity must be greater than 0\");\r\n        require(\r\n            (vintnersMintedPromotional + qty) <= PROMOTIONAL_VINTNERS,\r\n            \"you can't mint that many right now\"\r\n        );\r\n        require(\r\n            vintnerType == VINTNER_TYPE || vintnerType == MASTER_VINTNER_TYPE,\r\n            \"invalid vintner type\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < qty; i++) {\r\n            vintnersMintedPromotional += 1;\r\n            require(\r\n                tokenTypes[vintnersMintedPromotional] == 0,\r\n                \"that token's type has already been set\"\r\n            );\r\n            tokenTypes[vintnersMintedPromotional] = vintnerType;\r\n            _createVintner(target, vintnersMintedPromotional);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Whitelist GEN0 minting\r\n     * We implement a hard limit on the whitelist vintners.\r\n     */\r\n    // function mintWhitelist(bytes32[] calldata _merkleProof, uint256 qty)\r\n    //     external\r\n    //     payable\r\n    //     whenNotPaused\r\n    // {\r\n    //     // check most basic requirements\r\n    //     require(merkleRoot != 0, \"missing root\");\r\n    //     require(mintingStartedWhitelist(), \"cannot mint right now\");\r\n    //     require(!mintingStartedAVAX(), \"whitelist minting is closed\");\r\n\r\n    //     // check if address belongs in whitelist\r\n    //     bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));\r\n    //     require(\r\n    //         MerkleProof.verify(_merkleProof, merkleRoot, leaf),\r\n    //         \"this address does not have permission\"\r\n    //     );\r\n\r\n    //     // check more advanced requirements\r\n    //     require(\r\n    //         qty > 0 && qty <= MAXIMUM_MINTS_PER_WHITELIST_ADDRESS,\r\n    //         \"quantity must be between 1 and 4\"\r\n    //     );\r\n    //     require(\r\n    //         (vintnersMintedWhitelist + qty) <= WHITELIST_VINTNERS,\r\n    //         \"you can't mint that many right now\"\r\n    //     );\r\n    //     require(\r\n    //         (whitelistClaimed[_msgSender()] + qty) <=\r\n    //             MAXIMUM_MINTS_PER_WHITELIST_ADDRESS,\r\n    //         \"this address can't mint any more whitelist vintners\"\r\n    //     );\r\n\r\n    //     // check price\r\n    //     require(msg.value >= VINTNER_PRICE_WHITELIST * qty, \"not enough AVAX\");\r\n\r\n    //     vintnersMintedWhitelist += qty;\r\n    //     whitelistClaimed[_msgSender()] += qty;\r\n\r\n    //     // mint vintners\r\n    //     _createVintners(qty, _msgSender());\r\n    // }\r\n\r\n    /**\r\n     * @dev GEN0 minting\r\n     */\r\n    function mintVintnerWithAVAX(uint256 qty) external payable whenNotPaused {\r\n        require(mintingStartedAVAX(), \"cannot mint right now\");\r\n        require(qty > 0 && qty <= 10, \"quantity must be between 1 and 10\");\r\n        require(\r\n            (vintnersMintedWithAVAX + qty) <=\r\n                (NUM_GEN0_VINTNERS -\r\n                    // vintnersMintedWhitelist -\r\n                    PROMOTIONAL_VINTNERS),\r\n            \"you can't mint that many right now\"\r\n        );\r\n\r\n        // calculate the transaction cost\r\n        uint256 transactionCost = VINTNER_PRICE_AVAX * qty;\r\n        require(msg.value >= transactionCost, \"not enough AVAX\");\r\n\r\n        vintnersMintedWithAVAX += qty;\r\n\r\n        // mint vintners\r\n        _createVintners(qty, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev GEN1 minting\r\n     */\r\n    function mintVintnerWithVINTAGEWINE(uint256 qty) external whenNotPaused {\r\n        require(mintingStartedVINTAGEWINE(), \"cannot mint right now\");\r\n        require(qty > 0 && qty <= 10, \"quantity must be between 1 and 10\");\r\n        require(\r\n            (vintnersMintedWithVINTAGEWINE + qty) <= NUM_GEN1_VINTNERS,\r\n            \"you can't mint that many right now\"\r\n        );\r\n\r\n        // calculate transaction costs\r\n        uint256 transactionCostVINTAGEWINE = currentVINTAGEWINEMintCost * qty;\r\n        require(\r\n            vintageWine.balanceOf(_msgSender()) >= transactionCostVINTAGEWINE,\r\n            \"not enough VINTAGEWINE\"\r\n        );\r\n\r\n        // raise the mint level and cost when this mint would place us in the next level\r\n        // if you mint in the cost transition you get a discount =)\r\n        if (\r\n            vintnersMintedWithVINTAGEWINE <=\r\n            VINTNERS_PER_VINTAGEWINE_MINT_LEVEL &&\r\n            vintnersMintedWithVINTAGEWINE + qty >\r\n            VINTNERS_PER_VINTAGEWINE_MINT_LEVEL\r\n        ) {\r\n            currentVINTAGEWINEMintCost = currentVINTAGEWINEMintCost * 2;\r\n        }\r\n\r\n        vintnersMintedWithVINTAGEWINE += qty;\r\n\r\n        // spend vintageWine\r\n        vintageWine.burn(_msgSender(), transactionCostVINTAGEWINE);\r\n\r\n        // mint vintners\r\n        _createVintners(qty, _msgSender());\r\n    }\r\n\r\n    // Returns information for multiples vintners\r\n    function batchedVintnersOfOwner(\r\n        address _owner,\r\n        uint256 _offset,\r\n        uint256 _maxSize\r\n    ) public view returns (VintnerInfo[] memory) {\r\n        if (_offset >= balanceOf(_owner)) {\r\n            return new VintnerInfo[](0);\r\n        }\r\n\r\n        uint256 outputSize = _maxSize;\r\n        if (_offset + _maxSize >= balanceOf(_owner)) {\r\n            outputSize = balanceOf(_owner) - _offset;\r\n        }\r\n        VintnerInfo[] memory vintners = new VintnerInfo[](outputSize);\r\n\r\n        for (uint256 i = 0; i < outputSize; i++) {\r\n            uint256 tokenId = tokenOfOwnerByIndex(_owner, _offset + i); // tokenOfOwnerByIndex comes from IERC721Enumerable\r\n\r\n            vintners[i] = VintnerInfo({\r\n                tokenId: tokenId,\r\n                vintnerType: tokenTypes[tokenId]\r\n            });\r\n        }\r\n\r\n        return vintners;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/VintageWine.sol": {
      "content": "// Pizza Token\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract VintageWine is ERC20(\"VintageWine\", \"VINTAGEWINE\"), Ownable {\r\n    uint256 public constant ONE_VINTAGEWINE = 1e18;\r\n    uint256 public constant NUM_PROMOTIONAL_VINTAGEWINE = 500_000;\r\n    uint256 public constant NUM_VINTAGEWINE_GRAPE_LP = 20_000_000;\r\n\r\n    uint256 public NUM_VINTAGEWINE_AVAX_LP = 30_000_000;\r\n\r\n    address public cellarAddress;\r\n    address public wineryAddress;\r\n    address public vintnerAddress;\r\n    address public upgradeAddress;\r\n\r\n    bool public promotionalVintageWineMinted = false;\r\n    bool public avaxLPVintageWineMinted = false;\r\n    bool public grapeLPVintageWineMinted = false;\r\n\r\n    // ADMIN\r\n\r\n    /**\r\n     * winery yields vintageWine\r\n     */\r\n    function setWineryAddress(address _wineryAddress) external onlyOwner {\r\n        wineryAddress = _wineryAddress;\r\n    }\r\n\r\n    function setCellarAddress(address _cellarAddress) external onlyOwner {\r\n        cellarAddress = _cellarAddress;\r\n    }\r\n\r\n    function setUpgradeAddress(address _upgradeAddress) external onlyOwner {\r\n        upgradeAddress = _upgradeAddress;\r\n    }\r\n\r\n    /**\r\n     * vintner consumes vintageWine\r\n     * vintner address can only be set once\r\n     */\r\n    function setVintnerAddress(address _vintnerAddress) external onlyOwner {\r\n        require(\r\n            address(vintnerAddress) == address(0),\r\n            \"vintner address already set\"\r\n        );\r\n        vintnerAddress = _vintnerAddress;\r\n    }\r\n\r\n    function mintPromotionalVintageWine(address _to) external onlyOwner {\r\n        require(\r\n            !promotionalVintageWineMinted,\r\n            \"promotional vintageWine has already been minted\"\r\n        );\r\n        promotionalVintageWineMinted = true;\r\n        _mint(_to, NUM_PROMOTIONAL_VINTAGEWINE * ONE_VINTAGEWINE);\r\n    }\r\n\r\n    function mintAvaxLPVintageWine() external onlyOwner {\r\n        require(\r\n            !avaxLPVintageWineMinted,\r\n            \"avax vintageWine LP has already been minted\"\r\n        );\r\n        avaxLPVintageWineMinted = true;\r\n        _mint(owner(), NUM_VINTAGEWINE_AVAX_LP * ONE_VINTAGEWINE);\r\n    }\r\n\r\n    function mintGrapeLPVintageWine() external onlyOwner {\r\n        require(\r\n            !grapeLPVintageWineMinted,\r\n            \"grape vintageWine LP has already been minted\"\r\n        );\r\n        grapeLPVintageWineMinted = true;\r\n        _mint(owner(), NUM_VINTAGEWINE_GRAPE_LP * ONE_VINTAGEWINE);\r\n    }\r\n\r\n    function setNumVintageWineAvaxLp(uint256 _numVintageWineAvaxLp)\r\n        external\r\n        onlyOwner\r\n    {\r\n        NUM_VINTAGEWINE_AVAX_LP = _numVintageWineAvaxLp;\r\n    }\r\n\r\n    // external\r\n\r\n    function mint(address _to, uint256 _amount) external {\r\n        require(\r\n            wineryAddress != address(0) &&\r\n                vintnerAddress != address(0) &&\r\n                cellarAddress != address(0) &&\r\n                upgradeAddress != address(0),\r\n            \"missing initial requirements\"\r\n        );\r\n        require(\r\n            _msgSender() == wineryAddress,\r\n            \"msgsender does not have permission\"\r\n        );\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function burn(address _from, uint256 _amount) external {\r\n        require(\r\n            vintnerAddress != address(0) &&\r\n                cellarAddress != address(0) &&\r\n                upgradeAddress != address(0),\r\n            \"missing initial requirements\"\r\n        );\r\n        require(\r\n            _msgSender() == vintnerAddress ||\r\n                _msgSender() == cellarAddress ||\r\n                _msgSender() == upgradeAddress,\r\n            \"msgsender does not have permission\"\r\n        );\r\n        _burn(_from, _amount);\r\n    }\r\n\r\n    function transferToCellar(address _from, uint256 _amount) external {\r\n        require(cellarAddress != address(0), \"missing initial requirements\");\r\n        require(\r\n            _msgSender() == cellarAddress,\r\n            \"only the cellar contract can call transferToCellar\"\r\n        );\r\n        _transfer(_from, cellarAddress, _amount);\r\n    }\r\n\r\n    function transferForUpgradesFees(address _from, uint256 _amount) external {\r\n        require(upgradeAddress != address(0), \"missing initial requirements\");\r\n        require(\r\n            _msgSender() == upgradeAddress,\r\n            \"only the upgrade contract can call transferForUpgradesFees\"\r\n        );\r\n        _transfer(_from, upgradeAddress, _amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Winery.sol": {
      "content": "// Pizzeria\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\n// Open Zeppelin libraries for controlling upgradability and access.\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\nimport \"./Vintner.sol\";\r\nimport \"./Upgrade.sol\";\r\nimport \"./VintageWine.sol\";\r\n\r\ninterface IWineryProgression {\r\n    function getFatigueSkillModifier(address owner) external view returns (uint256);\r\n    function getBurnSkillModifier(address owner) external view returns (uint256);\r\n    function getCellarSkillModifier(address owner) external view returns (uint256);\r\n    function getMasterVintnerSkillModifier(address owner, uint256 masterVintnerNumber) external view returns (uint256);\r\n    function getMaxLevelUpgrade(address owner) external view returns (uint256);\r\n    function getMaxNumberVintners(address owner) external view returns (uint256);\r\n    // function getMafiaModifier(address owner) external view returns (uint256);\r\n    function getVintageWineStorage(address owner) external view returns (uint256);\r\n}\r\n\r\n// interface IMafia {\r\n//     function mafiaIsActive() external view returns (bool);\r\n//     function mafiaCurrentPenalty() external view returns (uint256);\r\n// }\r\n\r\ncontract Winery is Initializable, UUPSUpgradeable, OwnableUpgradeable {\r\n    // Constants\r\n    address public constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public constant CLAIM_VINTAGEWINE_CONTRIBUTION_PERCENTAGE = 10;\r\n    uint256 public constant CLAIM_VINTAGEWINE_BURN_PERCENTAGE = 10;\r\n    uint256 public constant MAX_FATIGUE = 100000000000000;\r\n\r\n    // Staking\r\n\r\n    mapping(uint256 => address) public stakedVintners; // tokenId => owner\r\n\r\n    mapping(address => uint256) public fatiguePerMinute; // address => fatigue per minute in the winery\r\n    mapping(address => uint256) public wineryFatigue; // address => fatigue\r\n    mapping(address => uint256) public wineryVintageWine; // address => vintageWine\r\n    mapping(address => uint256) public totalPPM; // address => total PPM\r\n    mapping(address => uint256) public startTimeStamp; // address => startTimeStamp\r\n\r\n    mapping(address => uint256[2]) public numberOfStaked; // address => [number of vintners, number of master vintners]\r\n\r\n    mapping(uint256 => address) public stakedUpgrades; // tokenId => owner\r\n\r\n    // Enumeration\r\n    mapping(address => mapping(uint256 => uint256)) public ownedVintnerStakes; // (address, index) => tokenid\r\n    mapping(uint256 => uint256) public ownedVintnerStakesIndex; // tokenId => index in its owner's stake list\r\n    mapping(address => uint256) public ownedVintnerStakesBalance; // address => stake count\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public ownedUpgradeStakes; // (address, index) => tokenid\r\n    mapping(uint256 => uint256) public ownedUpgradeStakesIndex; // tokenId => index in its owner's stake list\r\n    mapping(address => uint256) public ownedUpgradeStakesBalance; // address => stake count\r\n\r\n    // Fatigue cooldowns\r\n    mapping(uint256 => uint256) public restingVintners; // tokenId => timestamp until rested. 0 if is not resting\r\n\r\n    // Var\r\n\r\n    uint256 public yieldPPS; // vintageWine cooked per second per unit of yield\r\n\r\n    uint256 public startTime;\r\n\r\n    uint256 public grapeResetCost; // 0.1 Grape is the cost per PPM\r\n\r\n    uint256 public unstakePenalty; // Everytime someone unstake they need to pay this tax from the unclaimed amount\r\n\r\n    uint256 public fatigueTuner;\r\n\r\n    Vintner public vintner;\r\n    Upgrade public upgrade;\r\n    VintageWine public vintageWine;\r\n    IGrape public grape;\r\n    address public cellarAddress;\r\n    IWineryProgression public wineryProgression;\r\n    // IMafia public mafia;\r\n    // address public mafiaAddress;\r\n\r\n    function initialize(Vintner _vintner, Upgrade _upgrade, VintageWine _vintageWine, address _grape, address _cellarAddress, address _wineryProgression) public initializer {\r\n        vintner = _vintner;\r\n        grape = IGrape(_grape);\r\n        upgrade = _upgrade;\r\n        vintageWine = _vintageWine;\r\n        cellarAddress = _cellarAddress;\r\n        wineryProgression = IWineryProgression(_wineryProgression);\r\n\r\n        yieldPPS = 16666666666666667; // vintageWine cooked per second per unit of yield\r\n        startTime;\r\n        grapeResetCost = 1e17; // 0.1 Grape is the cost per PPM\r\n        unstakePenalty = 2000 * 1e18; // Everytime someone unstake they need to pay this tax from the unclaimed amount\r\n        fatigueTuner = 100;\r\n\r\n      ///@dev as there is no constructor, we need to initialise the OwnableUpgradeable explicitly\r\n       __Ownable_init();\r\n    }\r\n    ///@dev required by the OZ UUPS module\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n\r\n    // Setters\r\n    function setVintageWine(VintageWine _vintageWine) external onlyOwner {\r\n        vintageWine = _vintageWine;\r\n    }\r\n    function setCellarAddress(address _cellarAddress) external onlyOwner {\r\n        cellarAddress = _cellarAddress;\r\n    }\r\n    function setVintner(Vintner _vintner) external onlyOwner {\r\n        vintner = _vintner;\r\n    }\r\n    function setUpgrade(Upgrade _upgrade) external onlyOwner {\r\n        upgrade = _upgrade;\r\n    }\r\n    function setYieldPPS(uint256 _yieldPPS) external onlyOwner {\r\n        yieldPPS = _yieldPPS;\r\n    }\r\n    function setGrapeResetCost(uint256 _grapeResetCost) external onlyOwner {\r\n        grapeResetCost = _grapeResetCost;\r\n    }\r\n    function setUnstakePenalty(uint256 _unstakePenalty) external onlyOwner {\r\n        unstakePenalty = _unstakePenalty;\r\n    }\r\n    function setFatigueTuner(uint256 _fatigueTuner) external onlyOwner {\r\n        fatigueTuner = _fatigueTuner;\r\n    }\r\n    \r\n    function setGrape(address _grape) external onlyOwner {\r\n        grape = IGrape(_grape);\r\n    }\r\n    function setWineryProgression(address _wineryProgression) external onlyOwner {\r\n        wineryProgression = IWineryProgression(_wineryProgression);\r\n    }\r\n    // function setMafia(address _mafia) external onlyOwner {\r\n    //     mafiaAddress = _mafia;\r\n    //     mafia = IMafia(_mafia);\r\n    // }\r\n    // Calculations\r\n\r\n    /**\r\n     * Updates the Fatigue per Minute\r\n     * This function is called in _updateState\r\n     */\r\n\r\n    function fatiguePerMinuteCalculation(uint256 _ppm) public pure returns (uint256) {\r\n        // NOTE: fatiguePerMinute[_owner] = 8610000000 + 166000000  * totalPPM[_owner] + -220833 * totalPPM[_owner]* totalPPM[_owner]  + 463 * totalPPM[_owner]*totalPPM[_owner]*totalPPM[_owner]; \r\n        uint256 a = 463;\r\n        uint256 b = 220833;\r\n        uint256 c = 166000000;\r\n        uint256 d = 8610000000;\r\n        if(_ppm == 0){\r\n            return 0;\r\n        }\r\n        return d + c * _ppm + a * _ppm * _ppm * _ppm - b * _ppm * _ppm;\r\n    }\r\n\r\n    /**\r\n     * Returns the timestamp of when the entire winery will be fatigued\r\n     */\r\n    function timeUntilFatiguedCalculation(uint256 _startTime, uint256 _fatigue, uint256 _fatiguePerMinute) public pure returns (uint256) {\r\n        if(_fatiguePerMinute == 0){\r\n            return _startTime + 31536000; // 1 year in seconds, arbitrary long duration\r\n        }\r\n        return _startTime + 60 * ( MAX_FATIGUE - _fatigue ) / _fatiguePerMinute;\r\n    }\r\n\r\n    /**\r\n     * Returns the timestamp of when the vintner will be fully rested\r\n     */\r\n     function restingTimeCalculation(uint256 _vintnerType, uint256 _masterVintnerType, uint256 _fatigue) public pure returns (uint256) {\r\n        uint256 maxTime = 43200; //12*60*60\r\n        if( _vintnerType == _masterVintnerType){\r\n            maxTime = maxTime / 2; // master vintners rest half of the time of regular vintners\r\n        }\r\n\r\n        if(_fatigue > MAX_FATIGUE / 2){\r\n            return maxTime * _fatigue / MAX_FATIGUE;\r\n        }\r\n\r\n        return maxTime / 2; // minimum rest time is half of the maximum time\r\n    }\r\n\r\n    /**\r\n     * Returns vintner's vintageWine from vintnerVintageWine mapping\r\n     */\r\n     function vintageWineAccruedCalculation(uint256 _initialVintageWine, uint256 _deltaTime, uint256 _ppm, uint256 _modifier, uint256 _fatigue, uint256 _fatiguePerMinute, uint256 _yieldPPS) public pure returns (uint256) {\r\n        if(_fatigue >= MAX_FATIGUE){\r\n            return _initialVintageWine;\r\n        }\r\n\r\n        uint256 a = _deltaTime * _ppm * _yieldPPS * _modifier * (MAX_FATIGUE - _fatigue) / ( 100 * MAX_FATIGUE);\r\n        uint256 b = _deltaTime * _deltaTime * _ppm * _yieldPPS * _modifier * _fatiguePerMinute / (100 * 2 * 60 * MAX_FATIGUE);\r\n        if(a > b){\r\n            return _initialVintageWine + a - b;\r\n        }\r\n\r\n        return _initialVintageWine;\r\n    }\r\n\r\n    // Views\r\n\r\n    function getFatiguePerMinuteWithModifier(address _owner) public view returns (uint256) {\r\n        uint256 fatigueSkillModifier = wineryProgression.getFatigueSkillModifier(_owner);\r\n        return fatiguePerMinute[_owner]* (fatigueSkillModifier/100) * (fatigueTuner/100);\r\n    }\r\n\r\n    function _getMasterVintnerNumber(address _owner) internal view returns (uint256) {\r\n        return numberOfStaked[_owner][1];\r\n    }\r\n\r\n    /**\r\n     * Returns the current vintner's fatigue\r\n     */\r\n    function getFatigueAccrued(address _owner) public view returns (uint256) {\r\n        uint256 fatigue = (block.timestamp - startTimeStamp[_owner]) * getFatiguePerMinuteWithModifier(_owner) / 60;\r\n        fatigue += wineryFatigue[_owner];\r\n        if (fatigue > MAX_FATIGUE) {\r\n            fatigue = MAX_FATIGUE;\r\n        }\r\n        return fatigue;\r\n    }\r\n\r\n    function getTimeUntilFatigued(address _owner) public view returns (uint256) {\r\n        return timeUntilFatiguedCalculation(startTimeStamp[_owner], wineryFatigue[_owner], getFatiguePerMinuteWithModifier(_owner));\r\n    }\r\n\r\n    function getRestingTime(uint256 _tokenId, address _owner) public view returns (uint256) {\r\n        return restingTimeCalculation(vintner.getType(_tokenId), vintner.MASTER_VINTNER_TYPE(), getFatigueAccrued(_owner));\r\n    }\r\n\r\n    function getVintageWineAccrued(address _owner) public view returns (uint256) {\r\n        // if fatigueLastUpdate = MAX_FATIGUE it means that wineryVintageWine already has the correct value for the vintageWine, since it didn't produce vintageWine since last update\r\n        uint256 fatigueLastUpdate = wineryFatigue[_owner];\r\n        if(fatigueLastUpdate == MAX_FATIGUE){\r\n            return wineryVintageWine[_owner];\r\n        }\r\n\r\n        uint256 timeUntilFatigued = getTimeUntilFatigued(_owner);\r\n\r\n        uint256 endTimestamp;\r\n        if(block.timestamp >= timeUntilFatigued){\r\n            endTimestamp = timeUntilFatigued;\r\n        } else {\r\n            endTimestamp = block.timestamp;\r\n        }\r\n\r\n        uint256 ppm = getTotalPPM(_owner);\r\n\r\n        uint256 masterVintnerSkillModifier = wineryProgression.getMasterVintnerSkillModifier(_owner, _getMasterVintnerNumber(_owner));\r\n\r\n        uint256 delta = endTimestamp - startTimeStamp[_owner];\r\n\r\n        uint256 newVintageWineAmount = vintageWineAccruedCalculation(wineryVintageWine[_owner], delta, ppm, masterVintnerSkillModifier, fatigueLastUpdate, getFatiguePerMinuteWithModifier(_owner), yieldPPS);\r\n\r\n        uint256 maxVintageWine = wineryProgression.getVintageWineStorage(_owner);\r\n\r\n        if(newVintageWineAmount > maxVintageWine){\r\n            return maxVintageWine;\r\n        }\r\n        return newVintageWineAmount;\r\n    }\r\n\r\n    /**\r\n     * Calculates the total PPM staked for a winery. \r\n     * This will also be used in the fatiguePerMinute calculation\r\n     */\r\n    function getTotalPPM(address _owner) public view returns (uint256) {\r\n        return totalPPM[_owner];\r\n    }\r\n\r\n    function _updatefatiguePerMinute(address _owner) internal {\r\n        uint256 ppm = totalPPM[_owner];\r\n        if(ppm == 0){\r\n            delete wineryFatigue[_owner];\r\n        }\r\n        fatiguePerMinute[_owner] = fatiguePerMinuteCalculation(ppm);\r\n    }\r\n\r\n    //Claim\r\n    function _claimVintageWine(address _owner) internal {\r\n        uint256 cellarSkillModifier = wineryProgression.getCellarSkillModifier(_owner);\r\n        uint256 burnSkillModifier = wineryProgression.getBurnSkillModifier(_owner);\r\n\r\n        uint256 totalClaimed = getVintageWineAccrued(_owner);\r\n\r\n        delete wineryVintageWine[_owner];\r\n\r\n        wineryFatigue[_owner] = getFatigueAccrued(_owner);\r\n\r\n        startTimeStamp[_owner] = block.timestamp;\r\n\r\n        uint256 taxAmountCellar = totalClaimed * (CLAIM_VINTAGEWINE_CONTRIBUTION_PERCENTAGE - cellarSkillModifier) / 100;\r\n        uint256 taxAmountBurn = totalClaimed * (CLAIM_VINTAGEWINE_BURN_PERCENTAGE - burnSkillModifier) / 100;\r\n\r\n        // uint256 taxAmountMafia = 0;\r\n        // if(mafiaAddress != address(0) && mafia.mafiaIsActive()){\r\n        //     uint256 mafiaSkillModifier = wineryProgression.getMafiaModifier(_owner);\r\n        //     uint256 penalty = mafia.mafiaCurrentPenalty();\r\n        //     if(penalty < mafiaSkillModifier){\r\n        //         taxAmountMafia = 0;\r\n        //     } else {\r\n        //         taxAmountMafia = totalClaimed * (penalty - mafiaSkillModifier) / 100;\r\n        //     }\r\n        // }\r\n\r\n        // totalClaimed = totalClaimed - taxAmountCellar - taxAmountBurn - taxAmountMafia;\r\n        totalClaimed = totalClaimed - taxAmountCellar - taxAmountBurn;\r\n\r\n        vintageWine.mint(_owner, totalClaimed);\r\n        vintageWine.mint(cellarAddress, taxAmountCellar);\r\n    }\r\n\r\n    function claimVintageWine() public {\r\n        address owner = msg.sender;\r\n        _claimVintageWine(owner);\r\n    }\r\n\r\n    function _updateState(address _owner) internal {\r\n        wineryVintageWine[_owner] = getVintageWineAccrued(_owner);\r\n\r\n        wineryFatigue[_owner] = getFatigueAccrued(_owner);\r\n\r\n        startTimeStamp[_owner] = block.timestamp;\r\n    }\r\n\r\n    //Resets fatigue and claims\r\n    //Will need to approve grape first\r\n    function resetFatigue() public {\r\n        address _owner = msg.sender;\r\n        uint256 ppm = getTotalPPM(_owner);\r\n        uint256 costToReset = ppm * grapeResetCost;\r\n        require(grape.balanceOf(_owner) >= costToReset, \"not enough GRAPE\");\r\n\r\n        grape.transferFrom(address(_owner), DEAD_ADDRESS, costToReset);\r\n\r\n        wineryVintageWine[_owner] = getVintageWineAccrued(_owner);\r\n        startTimeStamp[_owner] = block.timestamp;\r\n        delete wineryFatigue[_owner];\r\n    }\r\n\r\n    function _taxUnstake(address _owner, uint256 _taxableAmount) internal {\r\n        uint256 totalClaimed = getVintageWineAccrued(_owner);\r\n        uint256 penaltyCost = _taxableAmount * unstakePenalty;\r\n        require(totalClaimed >= penaltyCost, \"Not enough VintageWine to pay the unstake penalty.\");\r\n\r\n        wineryVintageWine[_owner] = totalClaimed - penaltyCost;\r\n\r\n        wineryFatigue[_owner] = getFatigueAccrued(_owner);\r\n\r\n        startTimeStamp[_owner] = block.timestamp;\r\n    }\r\n\r\n\r\n    function unstakeVintnersAndUpgrades(uint256[] calldata _vintnerIds, uint256[] calldata _upgradeIds) public {\r\n        address owner = msg.sender;\r\n        // Check 1:1 correspondency between vintner and upgrade\r\n        require(numberOfStaked[owner][0] + numberOfStaked[owner][1] >= _vintnerIds.length, \"Invalid number of vintners\");\r\n        require(ownedUpgradeStakesBalance[owner] >= _upgradeIds.length, \"Invalid number of tools\");\r\n        require(numberOfStaked[owner][0] + numberOfStaked[owner][1] - _vintnerIds.length >= ownedUpgradeStakesBalance[owner] - _upgradeIds.length, \"Needs at least vintner for each tool\");\r\n\r\n        uint256 upgradeLength = _upgradeIds.length;\r\n        uint256 vintnerLength = _vintnerIds.length;\r\n\r\n        _taxUnstake(owner, upgradeLength + vintnerLength);\r\n        \r\n        for (uint256 i = 0; i < upgradeLength; i++) { //unstake upgrades\r\n            uint256 upgradeId = _upgradeIds[i];\r\n\r\n            require(stakedUpgrades[upgradeId] == owner, \"You don't own this tool\");\r\n\r\n            upgrade.transferFrom(address(this), owner, upgradeId);\r\n\r\n            totalPPM[owner] -= upgrade.getYield(upgradeId);\r\n\r\n            _removeUpgrade(upgradeId, owner);\r\n\r\n        }\r\n\r\n        for (uint256 i = 0; i < vintnerLength; i++) { //unstake vintners\r\n            uint256 vintnerId = _vintnerIds[i];\r\n\r\n            require(stakedVintners[vintnerId] == owner, \"You don't own this token\");\r\n            require(restingVintners[vintnerId] == 0, \"Vintner is resting\");\r\n\r\n            if(vintner.getType(vintnerId) == vintner.MASTER_VINTNER_TYPE()){\r\n                numberOfStaked[owner][1]--; \r\n            } else {\r\n                numberOfStaked[owner][0]--;\r\n            }\r\n\r\n            totalPPM[owner] -= vintner.getYield(vintnerId);\r\n\r\n            _moveVintnerToCooldown(vintnerId, owner);\r\n        }\r\n\r\n        _updatefatiguePerMinute(owner);\r\n    }\r\n\r\n    // Stake\r\n\r\n     /**\r\n     * This function updates stake vintners and upgrades\r\n     * The upgrades are paired with the vintner the upgrade will be applied\r\n     */\r\n    function stakeMany(uint256[] calldata _vintnerIds, uint256[] calldata _upgradeIds) public {\r\n        require(gameStarted(), \"The game has not started\");\r\n\r\n        address owner = msg.sender;\r\n\r\n        uint256 maxNumberVintners = wineryProgression.getMaxNumberVintners(owner);\r\n        uint256 vintnersAfterStaking = _vintnerIds.length + numberOfStaked[owner][0] + numberOfStaked[owner][1];\r\n        require(maxNumberVintners >= vintnersAfterStaking, \"You can't stake that many vintners\");\r\n\r\n        // Check 1:1 correspondency between vintner and upgrade\r\n        require(vintnersAfterStaking >= ownedUpgradeStakesBalance[owner] + _upgradeIds.length, \"Needs at least vintner for each tool\");\r\n\r\n        _updateState(owner);\r\n\r\n        uint256 vintnerLength = _vintnerIds.length;\r\n        for (uint256 i = 0; i < vintnerLength; i++) { //stakes vintner\r\n            uint256 vintnerId = _vintnerIds[i];\r\n\r\n            require(vintner.ownerOf(vintnerId) == owner, \"You don't own this token\");\r\n            require(vintner.getType(vintnerId) > 0, \"Vintner not yet revealed\");\r\n\r\n            if(vintner.getType(vintnerId) == vintner.MASTER_VINTNER_TYPE()){\r\n                numberOfStaked[owner][1]++;\r\n            } else {\r\n                numberOfStaked[owner][0]++;\r\n            }\r\n\r\n            totalPPM[owner] += vintner.getYield(vintnerId);\r\n\r\n            _addVintnerToWinery(vintnerId, owner);\r\n\r\n            vintner.transferFrom(owner, address(this), vintnerId);\r\n        }\r\n        uint256 maxLevelUpgrade = wineryProgression.getMaxLevelUpgrade(owner);\r\n        uint256 upgradeLength = _upgradeIds.length;\r\n        for (uint256 i = 0; i < upgradeLength; i++) { //stakes upgrades\r\n            uint256 upgradeId = _upgradeIds[i];\r\n\r\n            require(upgrade.ownerOf(upgradeId) == owner, \"You don't own this tool\");\r\n            require(upgrade.getLevel(upgradeId) <= maxLevelUpgrade, \"You can't equip that tool\");\r\n\r\n            totalPPM[owner] += upgrade.getYield(upgradeId);\r\n\r\n            _addUpgradeToWinery(upgradeId, owner);\r\n\r\n            upgrade.transferFrom(owner, address(this), upgradeId);\r\n\r\n        }\r\n        _updatefatiguePerMinute(owner);\r\n    }\r\n\r\n    function withdrawVintners(uint256[] calldata _vintnerIds) public {\r\n        address owner = msg.sender;\r\n        uint256 vintnerLength = _vintnerIds.length;\r\n        for (uint256 i = 0; i < vintnerLength; i++) {\r\n            uint256 _vintnerId = _vintnerIds[i];\r\n\r\n            require(restingVintners[_vintnerId] != 0, \"Vintner is not resting\");\r\n            require(stakedVintners[_vintnerId] == owner, \"You don't own this vintner\");\r\n            require(block.timestamp >= restingVintners[_vintnerId], \"Vintner is still resting\");\r\n\r\n            _removeVintnerFromCooldown(_vintnerId, owner);\r\n\r\n            vintner.transferFrom(address(this), owner, _vintnerId);\r\n        }\r\n    }\r\n\r\n    function reStakeRestedVintners(uint256[] calldata _vintnerIds) public {\r\n        address owner = msg.sender;\r\n\r\n        uint256 maxNumberVintners = wineryProgression.getMaxNumberVintners(owner);\r\n        uint256 vintnersAfterStaking = _vintnerIds.length + numberOfStaked[owner][0] + numberOfStaked[owner][1];\r\n        require(maxNumberVintners >= vintnersAfterStaking, \"You can't stake that many vintners\");\r\n\r\n        uint256 vintnerLength = _vintnerIds.length;\r\n        for (uint256 i = 0; i < vintnerLength; i++) { //stakes vintner\r\n            uint256 _vintnerId = _vintnerIds[i];\r\n\r\n            require(restingVintners[_vintnerId] != 0, \"Vintner is not resting\");\r\n            require(stakedVintners[_vintnerId] == owner, \"You don't own this vintner\");\r\n            require(block.timestamp >= restingVintners[_vintnerId], \"Vintner is still resting\");\r\n\r\n            delete restingVintners[_vintnerId];\r\n\r\n            if(vintner.getType(_vintnerId) == vintner.MASTER_VINTNER_TYPE()){\r\n                numberOfStaked[owner][1]++;\r\n            } else {\r\n                numberOfStaked[owner][0]++;\r\n            }\r\n\r\n            totalPPM[owner] += vintner.getYield(_vintnerId);\r\n        }\r\n        _updatefatiguePerMinute(owner);\r\n    }\r\n\r\n    function _addVintnerToWinery(uint256 _tokenId, address _owner) internal {\r\n        stakedVintners[_tokenId] = _owner;\r\n        uint256 length = ownedVintnerStakesBalance[_owner];\r\n        ownedVintnerStakes[_owner][length] = _tokenId;\r\n        ownedVintnerStakesIndex[_tokenId] = length;\r\n        ownedVintnerStakesBalance[_owner]++;\r\n    }\r\n\r\n    function _addUpgradeToWinery(uint256 _tokenId, address _owner) internal {\r\n        stakedUpgrades[_tokenId] = _owner;\r\n        uint256 length = ownedUpgradeStakesBalance[_owner];\r\n        ownedUpgradeStakes[_owner][length] = _tokenId;\r\n        ownedUpgradeStakesIndex[_tokenId] = length;\r\n        ownedUpgradeStakesBalance[_owner]++;\r\n    }\r\n\r\n    function _moveVintnerToCooldown(uint256 _vintnerId, address _owner) internal {\r\n        uint256 endTimestamp = block.timestamp + getRestingTime(_vintnerId, _owner);\r\n        restingVintners[_vintnerId] = endTimestamp;\r\n    }\r\n\r\n    function _removeVintnerFromCooldown(uint256 _vintnerId, address _owner) internal {\r\n        delete restingVintners[_vintnerId];\r\n        delete stakedVintners[_vintnerId];\r\n\r\n        uint256 lastTokenIndex = ownedVintnerStakesBalance[_owner] - 1;\r\n        uint256 tokenIndex = ownedVintnerStakesIndex[_vintnerId];\r\n\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = ownedVintnerStakes[_owner][lastTokenIndex];\r\n\r\n            ownedVintnerStakes[_owner][tokenIndex] = lastTokenId;\r\n            ownedVintnerStakesIndex[lastTokenId] = tokenIndex;\r\n        }\r\n\r\n        delete ownedVintnerStakesIndex[_vintnerId];\r\n        delete ownedVintnerStakes[_owner][lastTokenIndex];\r\n        ownedVintnerStakesBalance[_owner]--;\r\n    }\r\n\r\n    function _removeUpgrade(uint256 _upgradeId, address _owner) internal {\r\n        delete stakedUpgrades[_upgradeId];\r\n        \r\n        uint256 lastTokenIndex = ownedUpgradeStakesBalance[_owner] - 1;\r\n        uint256 tokenIndex = ownedUpgradeStakesIndex[_upgradeId];\r\n\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = ownedUpgradeStakes[_owner][lastTokenIndex];\r\n\r\n            ownedUpgradeStakes[_owner][tokenIndex] = lastTokenId;\r\n            ownedUpgradeStakesIndex[lastTokenId] = tokenIndex;\r\n        }\r\n\r\n        delete ownedUpgradeStakesIndex[_upgradeId];\r\n        delete ownedUpgradeStakes[_owner][lastTokenIndex];\r\n        ownedUpgradeStakesBalance[_owner]--;\r\n    }\r\n\r\n    // Admin\r\n\r\n    function gameStarted() public view returns (bool) {\r\n        return startTime != 0 && block.timestamp >= startTime;\r\n    }\r\n\r\n    function setStartTime(uint256 _startTime) external onlyOwner {\r\n        require (_startTime >= block.timestamp, \"startTime cannot be in the past\");\r\n        require(!gameStarted(), \"game already started\");\r\n        startTime = _startTime;\r\n    }\r\n\r\n    // Aggregated views\r\n    struct StakedVintnerInfo {\r\n        uint256 vintnerId;\r\n        uint256 vintnerPPM;\r\n        bool isResting;\r\n        uint256 endTimestamp;\r\n    }\r\n\r\n    function batchedStakesOfOwner(\r\n        address _owner,\r\n        uint256 _offset,\r\n        uint256 _maxSize\r\n    ) public view returns (StakedVintnerInfo[] memory) {\r\n        if (_offset >= ownedVintnerStakesBalance[_owner]) {\r\n            return new StakedVintnerInfo[](0);\r\n        }\r\n\r\n        uint256 outputSize = _maxSize;\r\n        if (_offset + _maxSize >= ownedVintnerStakesBalance[_owner]) {\r\n            outputSize = ownedVintnerStakesBalance[_owner] - _offset;\r\n        }\r\n        StakedVintnerInfo[] memory outputs = new StakedVintnerInfo[](outputSize);\r\n\r\n        for (uint256 i = 0; i < outputSize; i++) {\r\n            uint256 vintnerId = ownedVintnerStakes[_owner][_offset + i];\r\n\r\n            outputs[i] = StakedVintnerInfo({\r\n                vintnerId: vintnerId,\r\n                vintnerPPM: vintner.getYield(vintnerId),\r\n                isResting: restingVintners[vintnerId] > 0,\r\n                endTimestamp: restingVintners[vintnerId]\r\n            });\r\n        }\r\n\r\n        return outputs;\r\n    }\r\n\r\n    struct StakedToolInfo {\r\n        uint256 toolId;\r\n        uint256 toolPPM;\r\n    }\r\n\r\n    function batchedToolsOfOwner(\r\n        address _owner,\r\n        uint256 _offset,\r\n        uint256 _maxSize\r\n    ) public view returns (StakedToolInfo[] memory) {\r\n        if (_offset >= ownedUpgradeStakesBalance[_owner]) {\r\n            return new StakedToolInfo[](0);\r\n        }\r\n\r\n        uint256 outputSize = _maxSize;\r\n        if (_offset + _maxSize >= ownedUpgradeStakesBalance[_owner]) {\r\n            outputSize = ownedUpgradeStakesBalance[_owner] - _offset;\r\n        }\r\n        StakedToolInfo[] memory outputs = new StakedToolInfo[](outputSize);\r\n\r\n        for (uint256 i = 0; i < outputSize; i++) {\r\n            uint256 toolId = ownedUpgradeStakes[_owner][_offset + i];\r\n\r\n            outputs[i] = StakedToolInfo({\r\n                toolId: toolId,\r\n                toolPPM: upgrade.getYield(toolId)\r\n            });\r\n        }\r\n\r\n        return outputs;\r\n    }\r\n\r\n}"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/Upgrade.sol": {
      "content": "// Tool\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\nimport \"./VintageWine.sol\";\r\n\r\ninterface IGrape {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burnFrom(address account, uint256 amount) external ;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Upgrade is ERC721Enumerable, Ownable, Pausable {\r\n    using SafeERC20 for IERC20;\r\n    using Strings for uint256;\r\n\r\n\r\n    struct UpgradeInfo {\r\n        uint256 tokenId;\r\n        uint256 level;\r\n        uint256 yield;\r\n    }\r\n    // Struct\r\n\r\n    struct Level {\r\n        uint256 supply;\r\n        uint256 maxSupply;\r\n        uint256 priceVintageWine;\r\n        uint256 priceGrape;\r\n        uint256 yield;\r\n    }\r\n\r\n    // Var\r\n\r\n    VintageWine vintageWine;\r\n    IGrape grape;\r\n    address public wineryAddress;\r\n\r\n    string public BASE_URI;\r\n\r\n    uint256 public startTime;\r\n\r\n    mapping(uint256 => Level) public levels;\r\n    uint256 currentLevelIndex;\r\n\r\n    uint256 public upgradesMinted = 0;\r\n\r\n    uint256 public constant LP_TAX_PERCENT = 2;\r\n\r\n    mapping(uint256 => uint256) private tokenLevel;\r\n\r\n    // Events\r\n\r\n    event onUpgradeCreated(uint256 level);\r\n\r\n    // Constructor\r\n\r\n    constructor(VintageWine _vintageWine, address _grape, string memory _BASE_URI) ERC721(\"VintageWine Game Vintner Tools\", \"VINTAGEWINE-GAME-VINTNER-TOOL\") {\r\n        vintageWine = _vintageWine;\r\n        grape = IGrape(_grape);\r\n        BASE_URI = _BASE_URI;\r\n        \r\n        // first three upgrades\r\n        levels[0] = Level({ supply: 0, maxSupply: 2500, priceVintageWine: 3000 * 1e18, priceGrape: 50 * 1e18, yield: 1 });\r\n        levels[1] = Level({ supply: 0, maxSupply: 2200, priceVintageWine: 10000 * 1e18, priceGrape: 80 * 1e18, yield: 3 });\r\n        levels[2] = Level({ supply: 0, maxSupply: 2000, priceVintageWine: 20000 * 1e18, priceGrape: 110 * 1e18, yield: 5 });\r\n        currentLevelIndex = 2;\r\n    }\r\n\r\n    // Views\r\n\r\n    function mintingStarted() public view returns (bool) {\r\n        return startTime != 0 && block.timestamp > startTime;\r\n    }\r\n\r\n    function getYield(uint256 _tokenId) public view returns (uint256) {\r\n        require(_exists(_tokenId), \"token does not exist\");\r\n        return levels[tokenLevel[_tokenId]].yield;\r\n    }\r\n\r\n    function getLevel(uint256 _tokenId) public view returns (uint256) {\r\n        require(_exists(_tokenId), \"token does not exist\");\r\n        return tokenLevel[_tokenId];\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return BASE_URI;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        uint256 levelFixed = tokenLevel[_tokenId] + 1;\r\n        return string(abi.encodePacked(_baseURI(), \"/\", levelFixed.toString(), \".json\"));\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view override returns (bool) {\r\n        if (wineryAddress != address(0) && _operator == wineryAddress) return true;\r\n        return super.isApprovedForAll(_owner, _operator);\r\n    }\r\n\r\n    // ADMIN\r\n\r\n    function addLevel(uint256 _maxSupply, uint256 _priceVintageWine, uint256 _priceGrape, uint256 _yield) external onlyOwner {\r\n        currentLevelIndex++;\r\n        levels[currentLevelIndex] = Level({ supply: 0, maxSupply: _maxSupply, priceVintageWine: _priceVintageWine, priceGrape: _priceGrape, yield: _yield });\r\n    }\r\n\r\n    function changeLevel(uint256 _index, uint256 _maxSupply, uint256 _priceVintageWine, uint256 _priceGrape, uint256 _yield) external onlyOwner {\r\n        require(_index <= currentLevelIndex, \"invalid level\");\r\n        levels[_index] = Level({ supply: 0, maxSupply: _maxSupply, priceVintageWine: _priceVintageWine, priceGrape: _priceGrape, yield: _yield });\r\n    }\r\n\r\n    function setVintageWine(VintageWine _vintageWine) external onlyOwner {\r\n        vintageWine = _vintageWine;\r\n    }\r\n\r\n    function setGrape(address _grape) external onlyOwner {\r\n        grape = IGrape(_grape);\r\n    }\r\n\r\n    function setWineryAddress(address _wineryAddress) external onlyOwner {\r\n        wineryAddress = _wineryAddress;\r\n    }\r\n\r\n    function setStartTime(uint256 _startTime) external onlyOwner {\r\n        require(_startTime > block.timestamp, \"startTime must be in future\");\r\n        require(!mintingStarted(), \"minting already started\");\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function setBaseURI(string calldata _BASE_URI) external onlyOwner {\r\n        BASE_URI = _BASE_URI;\r\n    }\r\n\r\n    function forwardERC20s(IERC20 _token, uint256 _amount, address target) external onlyOwner {\r\n        _token.safeTransfer(target, _amount);\r\n    }\r\n\r\n    // Minting\r\n\r\n    function _createUpgrades(uint256 qty, uint256 level, address to) internal {\r\n        for (uint256 i = 0; i < qty; i++) {\r\n            upgradesMinted += 1;\r\n            levels[level].supply += 1;\r\n            tokenLevel[upgradesMinted] = level;\r\n            _safeMint(to, upgradesMinted);\r\n            emit onUpgradeCreated(level);\r\n        }\r\n    }\r\n\r\n    function mintUpgrade(uint256 _level, uint256 _qty) external whenNotPaused {\r\n        require(mintingStarted(), \"Tools sales are not open\");\r\n        require (_qty > 0 && _qty <= 10, \"quantity must be between 1 and 10\");\r\n        require(_level <= currentLevelIndex, \"invalid level\");\r\n        require ((levels[_level].supply + _qty) <= levels[_level].maxSupply, \"you can't mint that many right now\");\r\n\r\n        uint256 transactionCostVintageWine = levels[_level].priceVintageWine * _qty;\r\n        uint256 transactionCostGrape = levels[_level].priceGrape * _qty;\r\n        require (vintageWine.balanceOf(_msgSender()) >= transactionCostVintageWine, \"not have enough VINTAGEWINE\");\r\n        require (grape.balanceOf(_msgSender()) >= transactionCostGrape, \"not have enough GRAPE\");\r\n\r\n        _createUpgrades(_qty, _level, _msgSender());\r\n\r\n        vintageWine.burn(_msgSender(), transactionCostVintageWine * (100 - LP_TAX_PERCENT) / 100);\r\n        // grape.burn(_msgSender(), transactionCostGrape * (100 - LP_TAX_PERCENT) / 100);\r\n        grape.burnFrom(_msgSender(), transactionCostGrape * (100 - LP_TAX_PERCENT) / 100);\r\n\r\n        vintageWine.transferForUpgradesFees(_msgSender(), transactionCostVintageWine * LP_TAX_PERCENT / 100);\r\n        grape.transferFrom(_msgSender(), address(this), transactionCostVintageWine * LP_TAX_PERCENT / 100);\r\n        // grape.transferForUpgradesFees(_msgSender(), transactionCostGrape * LP_TAX_PERCENT / 100);\r\n    }\r\n\r\n    // Returns information for multiples upgrades\r\n    function batchedUpgradesOfOwner(address _owner, uint256 _offset, uint256 _maxSize) public view returns (UpgradeInfo[] memory) {\r\n        if (_offset >= balanceOf(_owner)) {\r\n            return new UpgradeInfo[](0);\r\n        }\r\n\r\n        uint256 outputSize = _maxSize;\r\n        if (_offset + _maxSize >= balanceOf(_owner)) {\r\n            outputSize = balanceOf(_owner) - _offset;\r\n        }\r\n        UpgradeInfo[] memory upgrades = new UpgradeInfo[](outputSize);\r\n\r\n        for (uint256 i = 0; i < outputSize; i++) {\r\n            uint256 tokenId = tokenOfOwnerByIndex(_owner, _offset + i); // tokenOfOwnerByIndex comes from IERC721Enumerable\r\n\r\n            upgrades[i] = UpgradeInfo({\r\n                tokenId: tokenId,\r\n                level: tokenLevel[tokenId],\r\n                yield: levels[tokenLevel[tokenId]].yield\r\n            });\r\n        }\r\n        return upgrades;\r\n    }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/libraries/BoringERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// solhint-disable avoid-low-level-calls\r\n\r\nlibrary BoringERC20 {\r\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\r\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\r\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\r\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\r\n\r\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length >= 64) {\r\n            return abi.decode(data, (string));\r\n        } else if (data.length == 32) {\r\n            uint8 i = 0;\r\n            while (i < 32 && data[i] != 0) {\r\n                i++;\r\n            }\r\n            bytes memory bytesArray = new bytes(i);\r\n            for (i = 0; i < 32 && data[i] != 0; i++) {\r\n                bytesArray[i] = data[i];\r\n            }\r\n            return string(bytesArray);\r\n        } else {\r\n            return \"???\";\r\n        }\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token symbol.\r\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token name.\r\n    function safeName(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (uint8) Token decimals.\r\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param from Transfer tokens from.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\r\n        );\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\r\n    }\r\n}"
    },
    "contracts/Cellar.sol": {
      "content": "// Freezer\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\nimport \"./VintageWine.sol\";\r\n\r\ncontract Cellar is ERC20(\"Staked VintageWine\", \"sVINTAGEWINE\"), Ownable, Pausable {\r\n    using SafeERC20 for VintageWine;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant DELAYED_UNSTAKE_LOCKUP_PERIOD = 2 days;\r\n    uint256 public constant DELAYED_UNSTAKE_BURN_PERCENT = 10;\r\n    uint256 public constant QUICK_UNSTAKE_CONTRIBUTION_PERCENT = 50;\r\n    uint256 public constant QUICK_UNSTAKE_BURN_PERCENT = 25;\r\n\r\n    VintageWine public vintageWine;\r\n    uint256 public frozenVintageWine; // VINTAGEWINE pending withdrawal\r\n\r\n    mapping(address => uint256) public unlockAmounts;\r\n    mapping(address => uint256) public unlockTimestamps;\r\n\r\n    uint256 public stakeTime;\r\n\r\n    constructor(VintageWine _vintageWine) {\r\n        vintageWine = _vintageWine;\r\n    }\r\n\r\n    // Views\r\n\r\n    function vintageWineBalance() public view returns (uint256 balance) {\r\n        return vintageWine.balanceOf(address(this)) - frozenVintageWine;\r\n    }\r\n\r\n    function _unstakeOutput(uint256 _share) internal view returns (uint256 output) {\r\n        uint256 totalShares = totalSupply();\r\n        return _share.mul(vintageWineBalance()).div(totalShares);\r\n    }\r\n\r\n    // External\r\n\r\n    function stake(uint256 _amount) external whenNotPaused {\r\n        require(stakeStarted(), \"You can't stake yet\");\r\n        uint256 totalShares = totalSupply();\r\n        // If no sVINTAGEWINE exists, mint it 1:1 to the amount put in\r\n        if (totalShares == 0 || vintageWineBalance() == 0) {\r\n            _mint(_msgSender(), _amount);\r\n        } else {\r\n            uint256 share = _amount.mul(totalShares).div(vintageWineBalance());\r\n            _mint(_msgSender(), share);\r\n        }\r\n\r\n        vintageWine.transferToCellar(_msgSender(), _amount);\r\n    }\r\n\r\n    function quickUnstake(uint256 _share) external whenNotPaused {\r\n        // QUICK_UNSTAKE_CONTRIBUTION_PERCENT of the claimable VINTAGEWINE will remain in the cellar\r\n        // the rest is transfered to the staker\r\n        uint256 unstakeOutput = _unstakeOutput(_share);\r\n        uint256 output = unstakeOutput.mul(100 - QUICK_UNSTAKE_CONTRIBUTION_PERCENT).div(100);\r\n        // QUICK_UNSTAKE_BURN_PERCENT of the claimable VINTAGEWINE is burned\r\n        uint256 amountSpoiled = unstakeOutput.mul(QUICK_UNSTAKE_BURN_PERCENT).div(100);\r\n\r\n        // burn staker's share\r\n        _burn(_msgSender(), _share);\r\n\r\n        vintageWine.burn(address(this), amountSpoiled);\r\n        vintageWine.safeTransfer(_msgSender(), output);\r\n    }\r\n\r\n    /**\r\n     * @dev _share argument specified in sVINTAGEWINE\r\n     */\r\n    function prepareDelayedUnstake(uint256 _share) external whenNotPaused {\r\n        // calculate output and burn staker's share\r\n        uint256 output = _unstakeOutput(_share); //converts svintageWine values to vintageWine\r\n        _burn(_msgSender(), _share);\r\n\r\n        // calculate and burn amount of output spoiled\r\n        uint256 amountSpoiled = output.mul(DELAYED_UNSTAKE_BURN_PERCENT).div(100);\r\n\r\n        // remove amountSpoiled from output\r\n        output -= amountSpoiled;\r\n\r\n        unlockAmounts[_msgSender()] += output;\r\n        unlockTimestamps[_msgSender()] = block.timestamp + DELAYED_UNSTAKE_LOCKUP_PERIOD;\r\n        frozenVintageWine += output;\r\n\r\n        vintageWine.burn(address(this), amountSpoiled);\r\n    }\r\n\r\n    /**\r\n     * @dev argument specified in VINTAGEWINE, not sVINTAGEWINE\r\n     */\r\n    function claimDelayedUnstake(uint256 _amount) external whenNotPaused {\r\n        require(block.timestamp >= unlockTimestamps[_msgSender()], \"VINTAGEWINE not yet unlocked\");\r\n        require(_amount <= unlockAmounts[_msgSender()], \"insufficient locked balance\");\r\n\r\n        // deduct from unlocked\r\n        unlockAmounts[_msgSender()] -= _amount;\r\n\r\n        frozenVintageWine -= _amount;\r\n\r\n        // transfer claim\r\n        vintageWine.safeTransfer(_msgSender(), _amount);\r\n    }\r\n\r\n    // Admin\r\n\r\n    function stakeStarted() public view returns (bool) {\r\n        return stakeTime != 0 && block.timestamp >= stakeTime;\r\n    }\r\n\r\n    function setStakeStartTime(uint256 _startTime) external onlyOwner {\r\n        require (_startTime >= block.timestamp, \"startTime cannot be in the past\");\r\n        require(!stakeStarted(), \"staking already started\");\r\n        stakeTime = _startTime;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}